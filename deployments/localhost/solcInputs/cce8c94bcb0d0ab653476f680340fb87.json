{
  "language": "Solidity",
  "sources": {
    "contracts/web3Ecommerce.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Web3Ecommerce {\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    event Listed(string _name, uint256 _cost, uint256 _stock);\n    event Bought(address buyer, uint256 orderId, uint256 itemId);\n\n    struct Item {\n        uint256 id;\n        string name;\n        string category;\n        string image;\n        uint256 cost;\n        uint256 rating;\n        uint256 stock;\n    }\n\n    struct Order {\n        uint256 time;\n        Item item;\n    }\n\n    mapping(uint256 => Item) public items;\n    mapping(address => uint256) public orderCount;\n    mapping(address => mapping(uint256 => Order)) public orders;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"only owner can call this function\");\n        _;\n    }\n\n    function list(\n        uint256 id,\n        string memory name,\n        string memory category,\n        string memory image,\n        uint256 cost,\n        uint256 rating,\n        uint256 stock\n    ) public onlyOwner {\n\n        Item memory item = Item(id, name, category, image, cost, rating, stock);\n\n        items[id] = item;\n        emit Listed(name, cost, stock);\n    }\n\n    function buy(uint256 _id) public payable {\n\n        Item memory item = items[_id];\n\n        require(msg.value >= item.cost, \"insufficient funds deposited\");\n        require(item.stock > 0, \"out of stock\");\n\n\n        orderCount[msg.sender]++;\n        orders[msg.sender][orderCount[msg.sender]] = Order(block.timestamp, item);\n        \n        items[_id].stock = item.stock - 1;\n\n        emit Bought(msg.sender, orderCount[msg.sender], item.id);\n\n\n    }\n\n    function withdraw() public onlyOwner {\n        (bool success, ) = payable(owner).call{value: address(this).balance}(\"\");\n        require(success);\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}